% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{merge_archetypes}
\alias{merge_archetypes}
\title{Identify and merge redundant archetypes into a representative subset}
\usage{
merge_archetypes(S_r, C_stacked, H_stacked, normalization = 0L, thread_no = 0L)
}
\arguments{
\item{S_r}{Reduced data matrix from which archetypes were found.}

\item{C_stacked}{Concatenated (and filtered) <code>C</code> (<b>S_r.n</b> x <em>n</em>) matrix.
Output of <code>collect_archetypes()</code> in <code>ResCollectArch["C_stacked"]</code>.}

\item{H_stacked}{Concatenated (and filtered) <code>H</code> (<b>S_r.n</b> x <em>n</em>) matrix.
Output of <code>collect_archetypes()</code> in <code>ResCollectArch["H_stacked"]</code>.}

\item{normalization}{Normalization method to apply to <b>S_r</b>.}

\item{thread_no}{Number of CPU threads to use. If 0, number is automatically determined.}
}
\value{
A named list: \itemize{
\item archetype_groups: Equivalent classes of archetypes (non-redundant)
\item C_merged,H_merged: C and H matrices of merged archetypes
\item sample_assignments: Assignment of samples/cells to merged archetypes
}
}
\description{
Identify and merge redundant archetypes into a representative subset
}
\examples{
prune.out = collect_archetypes(ACTION.out$C, ACTION.out$H)
G = buildNetwork(prune.out$H_stacked)
unification.out = merge_archetypes(G, S_r, prune.out$C_stacked, prune.out$H_stacked)
cell.clusters = unification.out$sample_assignments
}
