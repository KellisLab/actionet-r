// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/actionet.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// set_seed
void set_seed(double seed);
static SEXP _actionet_set_seed_try(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< double >::type seed(seedSEXP);
    set_seed(seed);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_set_seed(SEXP seedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_set_seed_try(seedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// runSVD
Rcpp::List runSVD(arma::sp_mat& A, int k, int max_it, int seed, int algorithm, int verbose);
static SEXP _actionet_runSVD_try(SEXP ASEXP, SEXP kSEXP, SEXP max_itSEXP, SEXP seedSEXP, SEXP algorithmSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type algorithm(algorithmSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(runSVD(A, k, max_it, seed, algorithm, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_runSVD(SEXP ASEXP, SEXP kSEXP, SEXP max_itSEXP, SEXP seedSEXP, SEXP algorithmSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_runSVD_try(ASEXP, kSEXP, max_itSEXP, seedSEXP, algorithmSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// runSVD_full
Rcpp::List runSVD_full(arma::mat& A, int k, int max_it, int seed, int algorithm, int verbose);
static SEXP _actionet_runSVD_full_try(SEXP ASEXP, SEXP kSEXP, SEXP max_itSEXP, SEXP seedSEXP, SEXP algorithmSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type algorithm(algorithmSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(runSVD_full(A, k, max_it, seed, algorithm, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_runSVD_full(SEXP ASEXP, SEXP kSEXP, SEXP max_itSEXP, SEXP seedSEXP, SEXP algorithmSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_runSVD_full_try(ASEXP, kSEXP, max_itSEXP, seedSEXP, algorithmSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// perturbedSVD
Rcpp::List perturbedSVD(arma::mat u, arma::vec d, arma::mat v, arma::mat A, arma::mat B);
static SEXP _actionet_perturbedSVD_try(SEXP uSEXP, SEXP dSEXP, SEXP vSEXP, SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(perturbedSVD(u, d, v, A, B));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_perturbedSVD(SEXP uSEXP, SEXP dSEXP, SEXP vSEXP, SEXP ASEXP, SEXP BSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_perturbedSVD_try(uSEXP, dSEXP, vSEXP, ASEXP, BSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// orthogonalize_batch_effect
Rcpp::List orthogonalize_batch_effect(arma::sp_mat& S, arma::mat& old_S_r, arma::mat& old_V, arma::mat& old_A, arma::mat& old_B, arma::vec& old_sigma, arma::mat& design);
static SEXP _actionet_orthogonalize_batch_effect_try(SEXP SSEXP, SEXP old_S_rSEXP, SEXP old_VSEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP old_sigmaSEXP, SEXP designSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type old_S_r(old_S_rSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type old_V(old_VSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type old_A(old_ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type old_B(old_BSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type old_sigma(old_sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type design(designSEXP);
    rcpp_result_gen = Rcpp::wrap(orthogonalize_batch_effect(S, old_S_r, old_V, old_A, old_B, old_sigma, design));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_orthogonalize_batch_effect(SEXP SSEXP, SEXP old_S_rSEXP, SEXP old_VSEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP old_sigmaSEXP, SEXP designSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_orthogonalize_batch_effect_try(SSEXP, old_S_rSEXP, old_VSEXP, old_ASEXP, old_BSEXP, old_sigmaSEXP, designSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// orthogonalize_batch_effect_full
Rcpp::List orthogonalize_batch_effect_full(arma::mat& S, arma::mat& old_S_r, arma::mat& old_V, arma::mat& old_A, arma::mat& old_B, arma::vec& old_sigma, arma::mat& design);
static SEXP _actionet_orthogonalize_batch_effect_full_try(SEXP SSEXP, SEXP old_S_rSEXP, SEXP old_VSEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP old_sigmaSEXP, SEXP designSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type old_S_r(old_S_rSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type old_V(old_VSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type old_A(old_ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type old_B(old_BSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type old_sigma(old_sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type design(designSEXP);
    rcpp_result_gen = Rcpp::wrap(orthogonalize_batch_effect_full(S, old_S_r, old_V, old_A, old_B, old_sigma, design));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_orthogonalize_batch_effect_full(SEXP SSEXP, SEXP old_S_rSEXP, SEXP old_VSEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP old_sigmaSEXP, SEXP designSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_orthogonalize_batch_effect_full_try(SSEXP, old_S_rSEXP, old_VSEXP, old_ASEXP, old_BSEXP, old_sigmaSEXP, designSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// orthogonalize_basal
Rcpp::List orthogonalize_basal(arma::sp_mat& S, arma::mat& old_S_r, arma::mat& old_V, arma::mat& old_A, arma::mat& old_B, arma::vec& old_sigma, arma::mat& basal);
static SEXP _actionet_orthogonalize_basal_try(SEXP SSEXP, SEXP old_S_rSEXP, SEXP old_VSEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP old_sigmaSEXP, SEXP basalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type old_S_r(old_S_rSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type old_V(old_VSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type old_A(old_ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type old_B(old_BSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type old_sigma(old_sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type basal(basalSEXP);
    rcpp_result_gen = Rcpp::wrap(orthogonalize_basal(S, old_S_r, old_V, old_A, old_B, old_sigma, basal));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_orthogonalize_basal(SEXP SSEXP, SEXP old_S_rSEXP, SEXP old_VSEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP old_sigmaSEXP, SEXP basalSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_orthogonalize_basal_try(SSEXP, old_S_rSEXP, old_VSEXP, old_ASEXP, old_BSEXP, old_sigmaSEXP, basalSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// orthogonalize_basal_full
Rcpp::List orthogonalize_basal_full(arma::mat& S, arma::mat& old_S_r, arma::mat& old_V, arma::mat& old_A, arma::mat& old_B, arma::vec& old_sigma, arma::mat& basal);
static SEXP _actionet_orthogonalize_basal_full_try(SEXP SSEXP, SEXP old_S_rSEXP, SEXP old_VSEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP old_sigmaSEXP, SEXP basalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type old_S_r(old_S_rSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type old_V(old_VSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type old_A(old_ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type old_B(old_BSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type old_sigma(old_sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type basal(basalSEXP);
    rcpp_result_gen = Rcpp::wrap(orthogonalize_basal_full(S, old_S_r, old_V, old_A, old_B, old_sigma, basal));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_orthogonalize_basal_full(SEXP SSEXP, SEXP old_S_rSEXP, SEXP old_VSEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP old_sigmaSEXP, SEXP basalSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_orthogonalize_basal_full_try(SSEXP, old_S_rSEXP, old_VSEXP, old_ASEXP, old_BSEXP, old_sigmaSEXP, basalSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// run_simplex_regression
arma::mat run_simplex_regression(arma::mat& A, arma::mat& B, bool computeXtX);
static SEXP _actionet_run_simplex_regression_try(SEXP ASEXP, SEXP BSEXP, SEXP computeXtXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< bool >::type computeXtX(computeXtXSEXP);
    rcpp_result_gen = Rcpp::wrap(run_simplex_regression(A, B, computeXtX));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_run_simplex_regression(SEXP ASEXP, SEXP BSEXP, SEXP computeXtXSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_run_simplex_regression_try(ASEXP, BSEXP, computeXtXSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// buildNetwork
arma::sp_mat buildNetwork(arma::mat H, std::string algorithm, std::string distance_metric, double density, int thread_no, bool mutual_edges_only, int k);
static SEXP _actionet_buildNetwork_try(SEXP HSEXP, SEXP algorithmSEXP, SEXP distance_metricSEXP, SEXP densitySEXP, SEXP thread_noSEXP, SEXP mutual_edges_onlySEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type H(HSEXP);
    Rcpp::traits::input_parameter< std::string >::type algorithm(algorithmSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance_metric(distance_metricSEXP);
    Rcpp::traits::input_parameter< double >::type density(densitySEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    Rcpp::traits::input_parameter< bool >::type mutual_edges_only(mutual_edges_onlySEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(buildNetwork(H, algorithm, distance_metric, density, thread_no, mutual_edges_only, k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_buildNetwork(SEXP HSEXP, SEXP algorithmSEXP, SEXP distance_metricSEXP, SEXP densitySEXP, SEXP thread_noSEXP, SEXP mutual_edges_onlySEXP, SEXP kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_buildNetwork_try(HSEXP, algorithmSEXP, distance_metricSEXP, densitySEXP, thread_noSEXP, mutual_edges_onlySEXP, kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// layoutNetwork
Rcpp::List layoutNetwork(arma::sp_mat& G, arma::mat& initial_position, const std::string& method, bool presmooth_network, double min_dist, double spread, double gamma, unsigned int n_epochs, int thread_no, int seed, double learning_rate, int sim2dist);
static SEXP _actionet_layoutNetwork_try(SEXP GSEXP, SEXP initial_positionSEXP, SEXP methodSEXP, SEXP presmooth_networkSEXP, SEXP min_distSEXP, SEXP spreadSEXP, SEXP gammaSEXP, SEXP n_epochsSEXP, SEXP thread_noSEXP, SEXP seedSEXP, SEXP learning_rateSEXP, SEXP sim2distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type initial_position(initial_positionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type presmooth_network(presmooth_networkSEXP);
    Rcpp::traits::input_parameter< double >::type min_dist(min_distSEXP);
    Rcpp::traits::input_parameter< double >::type spread(spreadSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_epochs(n_epochsSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type learning_rate(learning_rateSEXP);
    Rcpp::traits::input_parameter< int >::type sim2dist(sim2distSEXP);
    rcpp_result_gen = Rcpp::wrap(layoutNetwork(G, initial_position, method, presmooth_network, min_dist, spread, gamma, n_epochs, thread_no, seed, learning_rate, sim2dist));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_layoutNetwork(SEXP GSEXP, SEXP initial_positionSEXP, SEXP methodSEXP, SEXP presmooth_networkSEXP, SEXP min_distSEXP, SEXP spreadSEXP, SEXP gammaSEXP, SEXP n_epochsSEXP, SEXP thread_noSEXP, SEXP seedSEXP, SEXP learning_rateSEXP, SEXP sim2distSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_layoutNetwork_try(GSEXP, initial_positionSEXP, methodSEXP, presmooth_networkSEXP, min_distSEXP, spreadSEXP, gammaSEXP, n_epochsSEXP, thread_noSEXP, seedSEXP, learning_rateSEXP, sim2distSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_grouped_rowsums
arma::mat compute_grouped_rowsums(arma::sp_mat& S, arma::Col<unsigned long long> sample_assignments);
static SEXP _actionet_compute_grouped_rowsums_try(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::Col<unsigned long long> >::type sample_assignments(sample_assignmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_grouped_rowsums(S, sample_assignments));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_compute_grouped_rowsums(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_compute_grouped_rowsums_try(SSEXP, sample_assignmentsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_grouped_rowsums_full
arma::mat compute_grouped_rowsums_full(arma::mat& S, arma::Col<unsigned long long> sample_assignments);
static SEXP _actionet_compute_grouped_rowsums_full_try(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::Col<unsigned long long> >::type sample_assignments(sample_assignmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_grouped_rowsums_full(S, sample_assignments));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_compute_grouped_rowsums_full(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_compute_grouped_rowsums_full_try(SSEXP, sample_assignmentsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_grouped_rowmeans
arma::mat compute_grouped_rowmeans(arma::sp_mat& S, arma::Col<unsigned long long> sample_assignments);
static SEXP _actionet_compute_grouped_rowmeans_try(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::Col<unsigned long long> >::type sample_assignments(sample_assignmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_grouped_rowmeans(S, sample_assignments));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_compute_grouped_rowmeans(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_compute_grouped_rowmeans_try(SSEXP, sample_assignmentsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_grouped_rowmeans_full
arma::mat compute_grouped_rowmeans_full(arma::mat& S, arma::Col<unsigned long long> sample_assignments);
static SEXP _actionet_compute_grouped_rowmeans_full_try(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::Col<unsigned long long> >::type sample_assignments(sample_assignmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_grouped_rowmeans_full(S, sample_assignments));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_compute_grouped_rowmeans_full(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_compute_grouped_rowmeans_full_try(SSEXP, sample_assignmentsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_grouped_rowvars
arma::mat compute_grouped_rowvars(arma::sp_mat& S, arma::Col<unsigned long long> sample_assignments);
static SEXP _actionet_compute_grouped_rowvars_try(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::Col<unsigned long long> >::type sample_assignments(sample_assignmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_grouped_rowvars(S, sample_assignments));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_compute_grouped_rowvars(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_compute_grouped_rowvars_try(SSEXP, sample_assignmentsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_grouped_rowvars_full
arma::mat compute_grouped_rowvars_full(arma::mat& S, arma::Col<unsigned long long> sample_assignments);
static SEXP _actionet_compute_grouped_rowvars_full_try(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::Col<unsigned long long> >::type sample_assignments(sample_assignmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_grouped_rowvars_full(S, sample_assignments));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_compute_grouped_rowvars_full(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_compute_grouped_rowvars_full_try(SSEXP, sample_assignmentsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_archetype_feature_specificity
Rcpp::List compute_archetype_feature_specificity(arma::sp_mat& S, arma::mat& H, int thread_no);
static SEXP _actionet_compute_archetype_feature_specificity_try(SEXP SSEXP, SEXP HSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type H(HSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_archetype_feature_specificity(S, H, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_compute_archetype_feature_specificity(SEXP SSEXP, SEXP HSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_compute_archetype_feature_specificity_try(SSEXP, HSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_archetype_feature_specificity_full
Rcpp::List compute_archetype_feature_specificity_full(arma::mat& S, arma::mat& H, int thread_no);
static SEXP _actionet_compute_archetype_feature_specificity_full_try(SEXP SSEXP, SEXP HSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type H(HSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_archetype_feature_specificity_full(S, H, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_compute_archetype_feature_specificity_full(SEXP SSEXP, SEXP HSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_compute_archetype_feature_specificity_full_try(SSEXP, HSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_cluster_feature_specificity
Rcpp::List compute_cluster_feature_specificity(arma::sp_mat& S, arma::uvec sample_assignments, int thread_no);
static SEXP _actionet_compute_cluster_feature_specificity_try(SEXP SSEXP, SEXP sample_assignmentsSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type sample_assignments(sample_assignmentsSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_cluster_feature_specificity(S, sample_assignments, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_compute_cluster_feature_specificity(SEXP SSEXP, SEXP sample_assignmentsSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_compute_cluster_feature_specificity_try(SSEXP, sample_assignmentsSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_cluster_feature_specificity_full
Rcpp::List compute_cluster_feature_specificity_full(arma::mat& S, arma::uvec sample_assignments, int thread_no);
static SEXP _actionet_compute_cluster_feature_specificity_full_try(SEXP SSEXP, SEXP sample_assignmentsSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type sample_assignments(sample_assignmentsSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_cluster_feature_specificity_full(S, sample_assignments, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_compute_cluster_feature_specificity_full(SEXP SSEXP, SEXP sample_assignmentsSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_compute_cluster_feature_specificity_full_try(SSEXP, sample_assignmentsSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_core_number
arma::uvec compute_core_number(arma::sp_mat& G);
static SEXP _actionet_compute_core_number_try(SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_core_number(G));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_compute_core_number(SEXP GSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_compute_core_number_try(GSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_archetype_core_centrality
arma::vec compute_archetype_core_centrality(arma::sp_mat& G, arma::uvec sample_assignments);
static SEXP _actionet_compute_archetype_core_centrality_try(SEXP GSEXP, SEXP sample_assignmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type sample_assignments(sample_assignmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_archetype_core_centrality(G, sample_assignments));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_compute_archetype_core_centrality(SEXP GSEXP, SEXP sample_assignmentsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_compute_archetype_core_centrality_try(GSEXP, sample_assignmentsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_network_diffusion_fast
arma::mat compute_network_diffusion_fast(arma::sp_mat& G, arma::sp_mat& X0, int thread_no, double alpha, int max_it);
static SEXP _actionet_compute_network_diffusion_fast_try(SEXP GSEXP, SEXP X0SEXP, SEXP thread_noSEXP, SEXP alphaSEXP, SEXP max_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_network_diffusion_fast(G, X0, thread_no, alpha, max_it));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_compute_network_diffusion_fast(SEXP GSEXP, SEXP X0SEXP, SEXP thread_noSEXP, SEXP alphaSEXP, SEXP max_itSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_compute_network_diffusion_fast_try(GSEXP, X0SEXP, thread_noSEXP, alphaSEXP, max_itSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// assess_enrichment
Rcpp::List assess_enrichment(arma::mat& scores, arma::sp_mat& associations, int thread_no);
static SEXP _actionet_assess_enrichment_try(SEXP scoresSEXP, SEXP associationsSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type associations(associationsSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(assess_enrichment(scores, associations, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_assess_enrichment(SEXP scoresSEXP, SEXP associationsSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_assess_enrichment_try(scoresSEXP, associationsSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// MWM_hungarian
arma::mat MWM_hungarian(arma::mat& G);
static SEXP _actionet_MWM_hungarian_try(SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(MWM_hungarian(G));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_MWM_hungarian(SEXP GSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_MWM_hungarian_try(GSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// MWM_rank1
arma::umat MWM_rank1(arma::vec u, arma::vec v, double u_threshold, double v_threshold);
static SEXP _actionet_MWM_rank1_try(SEXP uSEXP, SEXP vSEXP, SEXP u_thresholdSEXP, SEXP v_thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type u_threshold(u_thresholdSEXP);
    Rcpp::traits::input_parameter< double >::type v_threshold(v_thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(MWM_rank1(u, v, u_threshold, v_threshold));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_MWM_rank1(SEXP uSEXP, SEXP vSEXP, SEXP u_thresholdSEXP, SEXP v_thresholdSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_MWM_rank1_try(uSEXP, vSEXP, u_thresholdSEXP, v_thresholdSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// run_LPA
Rcpp::NumericVector run_LPA(arma::sp_mat& G, arma::vec labels, double lambda, int iters, double sig_threshold, Rcpp::Nullable<Rcpp::IntegerVector> fixed_labels_, int thread_no);
static SEXP _actionet_run_LPA_try(SEXP GSEXP, SEXP labelsSEXP, SEXP lambdaSEXP, SEXP itersSEXP, SEXP sig_thresholdSEXP, SEXP fixed_labels_SEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< double >::type sig_threshold(sig_thresholdSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerVector> >::type fixed_labels_(fixed_labels_SEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(run_LPA(G, labels, lambda, iters, sig_threshold, fixed_labels_, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_run_LPA(SEXP GSEXP, SEXP labelsSEXP, SEXP lambdaSEXP, SEXP itersSEXP, SEXP sig_thresholdSEXP, SEXP fixed_labels_SEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_run_LPA_try(GSEXP, labelsSEXP, lambdaSEXP, itersSEXP, sig_thresholdSEXP, fixed_labels_SEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_marker_aggregate_stats
arma::mat compute_marker_aggregate_stats(arma::sp_mat& G, arma::sp_mat& S, arma::sp_mat& marker_mat, double alpha, int max_it, int thread_no, bool ignore_baseline_expression);
static SEXP _actionet_compute_marker_aggregate_stats_try(SEXP GSEXP, SEXP SSEXP, SEXP marker_matSEXP, SEXP alphaSEXP, SEXP max_itSEXP, SEXP thread_noSEXP, SEXP ignore_baseline_expressionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type marker_mat(marker_matSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    Rcpp::traits::input_parameter< bool >::type ignore_baseline_expression(ignore_baseline_expressionSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_marker_aggregate_stats(G, S, marker_mat, alpha, max_it, thread_no, ignore_baseline_expression));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_compute_marker_aggregate_stats(SEXP GSEXP, SEXP SSEXP, SEXP marker_matSEXP, SEXP alphaSEXP, SEXP max_itSEXP, SEXP thread_noSEXP, SEXP ignore_baseline_expressionSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_compute_marker_aggregate_stats_try(GSEXP, SSEXP, marker_matSEXP, alphaSEXP, max_itSEXP, thread_noSEXP, ignore_baseline_expressionSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// LSI
arma::sp_mat LSI(arma::sp_mat& X, double size_factor);
static SEXP _actionet_LSI_try(SEXP XSEXP, SEXP size_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type size_factor(size_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(LSI(X, size_factor));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_LSI(SEXP XSEXP, SEXP size_factorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_LSI_try(XSEXP, size_factorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// autocorrelation_Geary
Rcpp::List autocorrelation_Geary(arma::sp_mat G, arma::mat scores, int normalization_method, int perm_no, int thread_no);
static SEXP _actionet_autocorrelation_Geary_try(SEXP GSEXP, SEXP scoresSEXP, SEXP normalization_methodSEXP, SEXP perm_noSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< int >::type normalization_method(normalization_methodSEXP);
    Rcpp::traits::input_parameter< int >::type perm_no(perm_noSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(autocorrelation_Geary(G, scores, normalization_method, perm_no, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_autocorrelation_Geary(SEXP GSEXP, SEXP scoresSEXP, SEXP normalization_methodSEXP, SEXP perm_noSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_autocorrelation_Geary_try(GSEXP, scoresSEXP, normalization_methodSEXP, perm_noSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// autocorrelation_Geary_full
Rcpp::List autocorrelation_Geary_full(arma::mat G, arma::mat scores, int normalization_method, int perm_no, int thread_no);
static SEXP _actionet_autocorrelation_Geary_full_try(SEXP GSEXP, SEXP scoresSEXP, SEXP normalization_methodSEXP, SEXP perm_noSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< int >::type normalization_method(normalization_methodSEXP);
    Rcpp::traits::input_parameter< int >::type perm_no(perm_noSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(autocorrelation_Geary_full(G, scores, normalization_method, perm_no, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_autocorrelation_Geary_full(SEXP GSEXP, SEXP scoresSEXP, SEXP normalization_methodSEXP, SEXP perm_noSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_autocorrelation_Geary_full_try(GSEXP, scoresSEXP, normalization_methodSEXP, perm_noSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// autocorrelation_Moran
Rcpp::List autocorrelation_Moran(arma::sp_mat G, arma::mat scores, int normalization_method, int perm_no, int thread_no);
static SEXP _actionet_autocorrelation_Moran_try(SEXP GSEXP, SEXP scoresSEXP, SEXP normalization_methodSEXP, SEXP perm_noSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< int >::type normalization_method(normalization_methodSEXP);
    Rcpp::traits::input_parameter< int >::type perm_no(perm_noSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(autocorrelation_Moran(G, scores, normalization_method, perm_no, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_autocorrelation_Moran(SEXP GSEXP, SEXP scoresSEXP, SEXP normalization_methodSEXP, SEXP perm_noSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_autocorrelation_Moran_try(GSEXP, scoresSEXP, normalization_methodSEXP, perm_noSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// autocorrelation_Moran_full
Rcpp::List autocorrelation_Moran_full(arma::mat G, arma::mat scores, int normalization_method, int perm_no, int thread_no);
static SEXP _actionet_autocorrelation_Moran_full_try(SEXP GSEXP, SEXP scoresSEXP, SEXP normalization_methodSEXP, SEXP perm_noSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< int >::type normalization_method(normalization_methodSEXP);
    Rcpp::traits::input_parameter< int >::type perm_no(perm_noSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(autocorrelation_Moran_full(G, scores, normalization_method, perm_no, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_autocorrelation_Moran_full(SEXP GSEXP, SEXP scoresSEXP, SEXP normalization_methodSEXP, SEXP perm_noSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_autocorrelation_Moran_full_try(GSEXP, scoresSEXP, normalization_methodSEXP, perm_noSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_network_diffusion_approx
arma::mat compute_network_diffusion_approx(arma::sp_mat& G, arma::mat& X0, int thread_no, double alpha, int max_it, double res_threshold, int norm_type);
static SEXP _actionet_compute_network_diffusion_approx_try(SEXP GSEXP, SEXP X0SEXP, SEXP thread_noSEXP, SEXP alphaSEXP, SEXP max_itSEXP, SEXP res_thresholdSEXP, SEXP norm_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type res_threshold(res_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type norm_type(norm_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_network_diffusion_approx(G, X0, thread_no, alpha, max_it, res_threshold, norm_type));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_compute_network_diffusion_approx(SEXP GSEXP, SEXP X0SEXP, SEXP thread_noSEXP, SEXP alphaSEXP, SEXP max_itSEXP, SEXP res_thresholdSEXP, SEXP norm_typeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_compute_network_diffusion_approx_try(GSEXP, X0SEXP, thread_noSEXP, alphaSEXP, max_itSEXP, res_thresholdSEXP, norm_typeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// aggregate_genesets_mahalanobis_2archs
arma::mat aggregate_genesets_mahalanobis_2archs(arma::sp_mat& G, arma::sp_mat& S, arma::sp_mat& marker_mat, int network_normalization_method, int expression_normalization_method, int gene_scaling_method, double pre_alpha, double post_alpha, int thread_no);
static SEXP _actionet_aggregate_genesets_mahalanobis_2archs_try(SEXP GSEXP, SEXP SSEXP, SEXP marker_matSEXP, SEXP network_normalization_methodSEXP, SEXP expression_normalization_methodSEXP, SEXP gene_scaling_methodSEXP, SEXP pre_alphaSEXP, SEXP post_alphaSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type marker_mat(marker_matSEXP);
    Rcpp::traits::input_parameter< int >::type network_normalization_method(network_normalization_methodSEXP);
    Rcpp::traits::input_parameter< int >::type expression_normalization_method(expression_normalization_methodSEXP);
    Rcpp::traits::input_parameter< int >::type gene_scaling_method(gene_scaling_methodSEXP);
    Rcpp::traits::input_parameter< double >::type pre_alpha(pre_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type post_alpha(post_alphaSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(aggregate_genesets_mahalanobis_2archs(G, S, marker_mat, network_normalization_method, expression_normalization_method, gene_scaling_method, pre_alpha, post_alpha, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_aggregate_genesets_mahalanobis_2archs(SEXP GSEXP, SEXP SSEXP, SEXP marker_matSEXP, SEXP network_normalization_methodSEXP, SEXP expression_normalization_methodSEXP, SEXP gene_scaling_methodSEXP, SEXP pre_alphaSEXP, SEXP post_alphaSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_aggregate_genesets_mahalanobis_2archs_try(GSEXP, SSEXP, marker_matSEXP, network_normalization_methodSEXP, expression_normalization_methodSEXP, gene_scaling_methodSEXP, pre_alphaSEXP, post_alphaSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// aggregate_genesets_mahalanobis_2gmm
arma::mat aggregate_genesets_mahalanobis_2gmm(arma::sp_mat& G, arma::sp_mat& S, arma::sp_mat& marker_mat, int network_normalization_method, int expression_normalization_method, int gene_scaling_method, double pre_alpha, double post_alpha, int thread_no);
static SEXP _actionet_aggregate_genesets_mahalanobis_2gmm_try(SEXP GSEXP, SEXP SSEXP, SEXP marker_matSEXP, SEXP network_normalization_methodSEXP, SEXP expression_normalization_methodSEXP, SEXP gene_scaling_methodSEXP, SEXP pre_alphaSEXP, SEXP post_alphaSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type marker_mat(marker_matSEXP);
    Rcpp::traits::input_parameter< int >::type network_normalization_method(network_normalization_methodSEXP);
    Rcpp::traits::input_parameter< int >::type expression_normalization_method(expression_normalization_methodSEXP);
    Rcpp::traits::input_parameter< int >::type gene_scaling_method(gene_scaling_methodSEXP);
    Rcpp::traits::input_parameter< double >::type pre_alpha(pre_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type post_alpha(post_alphaSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(aggregate_genesets_mahalanobis_2gmm(G, S, marker_mat, network_normalization_method, expression_normalization_method, gene_scaling_method, pre_alpha, post_alpha, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_aggregate_genesets_mahalanobis_2gmm(SEXP GSEXP, SEXP SSEXP, SEXP marker_matSEXP, SEXP network_normalization_methodSEXP, SEXP expression_normalization_methodSEXP, SEXP gene_scaling_methodSEXP, SEXP pre_alphaSEXP, SEXP post_alphaSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_aggregate_genesets_mahalanobis_2gmm_try(GSEXP, SSEXP, marker_matSEXP, network_normalization_methodSEXP, expression_normalization_methodSEXP, gene_scaling_methodSEXP, pre_alphaSEXP, post_alphaSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// normalize_mat
arma::mat normalize_mat(arma::mat& X, int p, int dim);
static SEXP _actionet_normalize_mat_try(SEXP XSEXP, SEXP pSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize_mat(X, p, dim));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_normalize_mat(SEXP XSEXP, SEXP pSEXP, SEXP dimSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_normalize_mat_try(XSEXP, pSEXP, dimSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// normalize_spmat
arma::sp_mat normalize_spmat(arma::sp_mat& X, int p, int dim);
static SEXP _actionet_normalize_spmat_try(SEXP XSEXP, SEXP pSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize_spmat(X, p, dim));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_normalize_spmat(SEXP XSEXP, SEXP pSEXP, SEXP dimSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_normalize_spmat_try(XSEXP, pSEXP, dimSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// xicor
arma::vec xicor(arma::vec xvec, arma::vec yvec, bool compute_pval, int seed);
static SEXP _actionet_xicor_try(SEXP xvecSEXP, SEXP yvecSEXP, SEXP compute_pvalSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type xvec(xvecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yvec(yvecSEXP);
    Rcpp::traits::input_parameter< bool >::type compute_pval(compute_pvalSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(xicor(xvec, yvec, compute_pval, seed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_xicor(SEXP xvecSEXP, SEXP yvecSEXP, SEXP compute_pvalSEXP, SEXP seedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_xicor_try(xvecSEXP, yvecSEXP, compute_pvalSEXP, seedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// XICOR
Rcpp::List XICOR(arma::mat& X, arma::mat& Y, bool compute_pval, int seed, int thread_no);
static SEXP _actionet_XICOR_try(SEXP XSEXP, SEXP YSEXP, SEXP compute_pvalSEXP, SEXP seedSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< bool >::type compute_pval(compute_pvalSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(XICOR(X, Y, compute_pval, seed, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_XICOR(SEXP XSEXP, SEXP YSEXP, SEXP compute_pvalSEXP, SEXP seedSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_XICOR_try(XSEXP, YSEXP, compute_pvalSEXP, seedSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// aggregate_genesets
Rcpp::List aggregate_genesets(arma::sp_mat& G, arma::sp_mat& S, arma::sp_mat& marker_mat, int network_normalization_method, double alpha, int thread_no);
static SEXP _actionet_aggregate_genesets_try(SEXP GSEXP, SEXP SSEXP, SEXP marker_matSEXP, SEXP network_normalization_methodSEXP, SEXP alphaSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type marker_mat(marker_matSEXP);
    Rcpp::traits::input_parameter< int >::type network_normalization_method(network_normalization_methodSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(aggregate_genesets(G, S, marker_mat, network_normalization_method, alpha, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_aggregate_genesets(SEXP GSEXP, SEXP SSEXP, SEXP marker_matSEXP, SEXP network_normalization_methodSEXP, SEXP alphaSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_aggregate_genesets_try(GSEXP, SSEXP, marker_matSEXP, network_normalization_methodSEXP, alphaSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// assess_label_enrichment
arma::mat assess_label_enrichment(arma::sp_mat& G, arma::mat& M, int thread_no);
static SEXP _actionet_assess_label_enrichment_try(SEXP GSEXP, SEXP MSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(assess_label_enrichment(G, M, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_assess_label_enrichment(SEXP GSEXP, SEXP MSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_assess_label_enrichment_try(GSEXP, MSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// autocorrelation_Moran_parametric_full
Rcpp::List autocorrelation_Moran_parametric_full(arma::mat G, arma::mat scores, int normalization_method, int thread_no);
static SEXP _actionet_autocorrelation_Moran_parametric_full_try(SEXP GSEXP, SEXP scoresSEXP, SEXP normalization_methodSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< int >::type normalization_method(normalization_methodSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(autocorrelation_Moran_parametric_full(G, scores, normalization_method, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_autocorrelation_Moran_parametric_full(SEXP GSEXP, SEXP scoresSEXP, SEXP normalization_methodSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_autocorrelation_Moran_parametric_full_try(GSEXP, scoresSEXP, normalization_methodSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// autocorrelation_Moran_parametric
Rcpp::List autocorrelation_Moran_parametric(arma::sp_mat G, arma::mat scores, int normalization_method, int thread_no);
static SEXP _actionet_autocorrelation_Moran_parametric_try(SEXP GSEXP, SEXP scoresSEXP, SEXP normalization_methodSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< int >::type normalization_method(normalization_methodSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(autocorrelation_Moran_parametric(G, scores, normalization_method, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_autocorrelation_Moran_parametric(SEXP GSEXP, SEXP scoresSEXP, SEXP normalization_methodSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_autocorrelation_Moran_parametric_try(GSEXP, scoresSEXP, normalization_methodSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// run_AA
Rcpp::List run_AA(arma::mat& A, arma::mat& W0, int max_it, double tol);
static SEXP _actionet_run_AA_try(SEXP ASEXP, SEXP W0SEXP, SEXP max_itSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type W0(W0SEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(run_AA(A, W0, max_it, tol));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_run_AA(SEXP ASEXP, SEXP W0SEXP, SEXP max_itSEXP, SEXP tolSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_run_AA_try(ASEXP, W0SEXP, max_itSEXP, tolSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// run_ACTION
Rcpp::List run_ACTION(arma::mat& S_r, int k_min, int k_max, int normalization, int max_it, double tol, int thread_no);
static SEXP _actionet_run_ACTION_try(SEXP S_rSEXP, SEXP k_minSEXP, SEXP k_maxSEXP, SEXP normalizationSEXP, SEXP max_itSEXP, SEXP tolSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type S_r(S_rSEXP);
    Rcpp::traits::input_parameter< int >::type k_min(k_minSEXP);
    Rcpp::traits::input_parameter< int >::type k_max(k_maxSEXP);
    Rcpp::traits::input_parameter< int >::type normalization(normalizationSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(run_ACTION(S_r, k_min, k_max, normalization, max_it, tol, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_run_ACTION(SEXP S_rSEXP, SEXP k_minSEXP, SEXP k_maxSEXP, SEXP normalizationSEXP, SEXP max_itSEXP, SEXP tolSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_run_ACTION_try(S_rSEXP, k_minSEXP, k_maxSEXP, normalizationSEXP, max_itSEXP, tolSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// collect_archetypes
Rcpp::List collect_archetypes(const Rcpp::List& C_trace, const Rcpp::List& H_trace, double spec_th, int min_obs);
static SEXP _actionet_collect_archetypes_try(SEXP C_traceSEXP, SEXP H_traceSEXP, SEXP spec_thSEXP, SEXP min_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type C_trace(C_traceSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type H_trace(H_traceSEXP);
    Rcpp::traits::input_parameter< double >::type spec_th(spec_thSEXP);
    Rcpp::traits::input_parameter< int >::type min_obs(min_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(collect_archetypes(C_trace, H_trace, spec_th, min_obs));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_collect_archetypes(SEXP C_traceSEXP, SEXP H_traceSEXP, SEXP spec_thSEXP, SEXP min_obsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_collect_archetypes_try(C_traceSEXP, H_traceSEXP, spec_thSEXP, min_obsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// merge_archetypes
Rcpp::List merge_archetypes(arma::mat& S_r, arma::mat C_stacked, arma::mat H_stacked, int normalization, int thread_no);
static SEXP _actionet_merge_archetypes_try(SEXP S_rSEXP, SEXP C_stackedSEXP, SEXP H_stackedSEXP, SEXP normalizationSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type S_r(S_rSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C_stacked(C_stackedSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H_stacked(H_stackedSEXP);
    Rcpp::traits::input_parameter< int >::type normalization(normalizationSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(merge_archetypes(S_r, C_stacked, H_stacked, normalization, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_merge_archetypes(SEXP S_rSEXP, SEXP C_stackedSEXP, SEXP H_stackedSEXP, SEXP normalizationSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_merge_archetypes_try(S_rSEXP, C_stackedSEXP, H_stackedSEXP, normalizationSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// reduce_kernel
Rcpp::List reduce_kernel(arma::sp_mat& S, int reduced_dim, int iter, int seed, int SVD_algorithm, int verbose);
static SEXP _actionet_reduce_kernel_try(SEXP SSEXP, SEXP reduced_dimSEXP, SEXP iterSEXP, SEXP seedSEXP, SEXP SVD_algorithmSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type reduced_dim(reduced_dimSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type SVD_algorithm(SVD_algorithmSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_kernel(S, reduced_dim, iter, seed, SVD_algorithm, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_reduce_kernel(SEXP SSEXP, SEXP reduced_dimSEXP, SEXP iterSEXP, SEXP seedSEXP, SEXP SVD_algorithmSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_reduce_kernel_try(SSEXP, reduced_dimSEXP, iterSEXP, seedSEXP, SVD_algorithmSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// reduce_kernel_full
Rcpp::List reduce_kernel_full(arma::mat& S, int reduced_dim, int iter, int seed, int SVD_algorithm, bool prenormalize, int verbose);
static SEXP _actionet_reduce_kernel_full_try(SEXP SSEXP, SEXP reduced_dimSEXP, SEXP iterSEXP, SEXP seedSEXP, SEXP SVD_algorithmSEXP, SEXP prenormalizeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type reduced_dim(reduced_dimSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type SVD_algorithm(SVD_algorithmSEXP);
    Rcpp::traits::input_parameter< bool >::type prenormalize(prenormalizeSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_kernel_full(S, reduced_dim, iter, seed, SVD_algorithm, prenormalize, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_reduce_kernel_full(SEXP SSEXP, SEXP reduced_dimSEXP, SEXP iterSEXP, SEXP seedSEXP, SEXP SVD_algorithmSEXP, SEXP prenormalizeSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_reduce_kernel_full_try(SSEXP, reduced_dimSEXP, iterSEXP, seedSEXP, SVD_algorithmSEXP, prenormalizeSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// run_SPA
Rcpp::List run_SPA(arma::mat& A, int k);
static SEXP _actionet_run_SPA_try(SEXP ASEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(run_SPA(A, k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _actionet_run_SPA(SEXP ASEXP, SEXP kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_actionet_run_SPA_try(ASEXP, kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _actionet_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("void(*set_seed)(double)");
        signatures.insert("Rcpp::List(*runSVD)(arma::sp_mat&,int,int,int,int,int)");
        signatures.insert("Rcpp::List(*runSVD_full)(arma::mat&,int,int,int,int,int)");
        signatures.insert("Rcpp::List(*perturbedSVD)(arma::mat,arma::vec,arma::mat,arma::mat,arma::mat)");
        signatures.insert("Rcpp::List(*orthogonalize_batch_effect)(arma::sp_mat&,arma::mat&,arma::mat&,arma::mat&,arma::mat&,arma::vec&,arma::mat&)");
        signatures.insert("Rcpp::List(*orthogonalize_batch_effect_full)(arma::mat&,arma::mat&,arma::mat&,arma::mat&,arma::mat&,arma::vec&,arma::mat&)");
        signatures.insert("Rcpp::List(*orthogonalize_basal)(arma::sp_mat&,arma::mat&,arma::mat&,arma::mat&,arma::mat&,arma::vec&,arma::mat&)");
        signatures.insert("Rcpp::List(*orthogonalize_basal_full)(arma::mat&,arma::mat&,arma::mat&,arma::mat&,arma::mat&,arma::vec&,arma::mat&)");
        signatures.insert("arma::mat(*run_simplex_regression)(arma::mat&,arma::mat&,bool)");
        signatures.insert("arma::sp_mat(*buildNetwork)(arma::mat,std::string,std::string,double,int,bool,int)");
        signatures.insert("Rcpp::List(*layoutNetwork)(arma::sp_mat&,arma::mat&,const std::string&,bool,double,double,double,unsigned int,int,int,double,int)");
        signatures.insert("arma::mat(*compute_grouped_rowsums)(arma::sp_mat&,arma::Col<unsigned long long>)");
        signatures.insert("arma::mat(*compute_grouped_rowsums_full)(arma::mat&,arma::Col<unsigned long long>)");
        signatures.insert("arma::mat(*compute_grouped_rowmeans)(arma::sp_mat&,arma::Col<unsigned long long>)");
        signatures.insert("arma::mat(*compute_grouped_rowmeans_full)(arma::mat&,arma::Col<unsigned long long>)");
        signatures.insert("arma::mat(*compute_grouped_rowvars)(arma::sp_mat&,arma::Col<unsigned long long>)");
        signatures.insert("arma::mat(*compute_grouped_rowvars_full)(arma::mat&,arma::Col<unsigned long long>)");
        signatures.insert("Rcpp::List(*compute_archetype_feature_specificity)(arma::sp_mat&,arma::mat&,int)");
        signatures.insert("Rcpp::List(*compute_archetype_feature_specificity_full)(arma::mat&,arma::mat&,int)");
        signatures.insert("Rcpp::List(*compute_cluster_feature_specificity)(arma::sp_mat&,arma::uvec,int)");
        signatures.insert("Rcpp::List(*compute_cluster_feature_specificity_full)(arma::mat&,arma::uvec,int)");
        signatures.insert("arma::uvec(*compute_core_number)(arma::sp_mat&)");
        signatures.insert("arma::vec(*compute_archetype_core_centrality)(arma::sp_mat&,arma::uvec)");
        signatures.insert("arma::mat(*compute_network_diffusion_fast)(arma::sp_mat&,arma::sp_mat&,int,double,int)");
        signatures.insert("Rcpp::List(*assess_enrichment)(arma::mat&,arma::sp_mat&,int)");
        signatures.insert("arma::mat(*MWM_hungarian)(arma::mat&)");
        signatures.insert("arma::umat(*MWM_rank1)(arma::vec,arma::vec,double,double)");
        signatures.insert("Rcpp::NumericVector(*run_LPA)(arma::sp_mat&,arma::vec,double,int,double,Rcpp::Nullable<Rcpp::IntegerVector>,int)");
        signatures.insert("arma::mat(*compute_marker_aggregate_stats)(arma::sp_mat&,arma::sp_mat&,arma::sp_mat&,double,int,int,bool)");
        signatures.insert("arma::sp_mat(*LSI)(arma::sp_mat&,double)");
        signatures.insert("Rcpp::List(*autocorrelation_Geary)(arma::sp_mat,arma::mat,int,int,int)");
        signatures.insert("Rcpp::List(*autocorrelation_Geary_full)(arma::mat,arma::mat,int,int,int)");
        signatures.insert("Rcpp::List(*autocorrelation_Moran)(arma::sp_mat,arma::mat,int,int,int)");
        signatures.insert("Rcpp::List(*autocorrelation_Moran_full)(arma::mat,arma::mat,int,int,int)");
        signatures.insert("arma::mat(*compute_network_diffusion_approx)(arma::sp_mat&,arma::mat&,int,double,int,double,int)");
        signatures.insert("arma::mat(*aggregate_genesets_mahalanobis_2archs)(arma::sp_mat&,arma::sp_mat&,arma::sp_mat&,int,int,int,double,double,int)");
        signatures.insert("arma::mat(*aggregate_genesets_mahalanobis_2gmm)(arma::sp_mat&,arma::sp_mat&,arma::sp_mat&,int,int,int,double,double,int)");
        signatures.insert("arma::mat(*normalize_mat)(arma::mat&,int,int)");
        signatures.insert("arma::sp_mat(*normalize_spmat)(arma::sp_mat&,int,int)");
        signatures.insert("arma::vec(*xicor)(arma::vec,arma::vec,bool,int)");
        signatures.insert("Rcpp::List(*XICOR)(arma::mat&,arma::mat&,bool,int,int)");
        signatures.insert("Rcpp::List(*aggregate_genesets)(arma::sp_mat&,arma::sp_mat&,arma::sp_mat&,int,double,int)");
        signatures.insert("arma::mat(*assess_label_enrichment)(arma::sp_mat&,arma::mat&,int)");
        signatures.insert("Rcpp::List(*autocorrelation_Moran_parametric_full)(arma::mat,arma::mat,int,int)");
        signatures.insert("Rcpp::List(*autocorrelation_Moran_parametric)(arma::sp_mat,arma::mat,int,int)");
        signatures.insert("Rcpp::List(*run_AA)(arma::mat&,arma::mat&,int,double)");
        signatures.insert("Rcpp::List(*run_ACTION)(arma::mat&,int,int,int,int,double,int)");
        signatures.insert("Rcpp::List(*collect_archetypes)(const Rcpp::List&,const Rcpp::List&,double,int)");
        signatures.insert("Rcpp::List(*merge_archetypes)(arma::mat&,arma::mat,arma::mat,int,int)");
        signatures.insert("Rcpp::List(*reduce_kernel)(arma::sp_mat&,int,int,int,int,int)");
        signatures.insert("Rcpp::List(*reduce_kernel_full)(arma::mat&,int,int,int,int,bool,int)");
        signatures.insert("Rcpp::List(*run_SPA)(arma::mat&,int)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _actionet_RcppExport_registerCCallable() { 
    R_RegisterCCallable("actionet", "_actionet_set_seed", (DL_FUNC)_actionet_set_seed_try);
    R_RegisterCCallable("actionet", "_actionet_runSVD", (DL_FUNC)_actionet_runSVD_try);
    R_RegisterCCallable("actionet", "_actionet_runSVD_full", (DL_FUNC)_actionet_runSVD_full_try);
    R_RegisterCCallable("actionet", "_actionet_perturbedSVD", (DL_FUNC)_actionet_perturbedSVD_try);
    R_RegisterCCallable("actionet", "_actionet_orthogonalize_batch_effect", (DL_FUNC)_actionet_orthogonalize_batch_effect_try);
    R_RegisterCCallable("actionet", "_actionet_orthogonalize_batch_effect_full", (DL_FUNC)_actionet_orthogonalize_batch_effect_full_try);
    R_RegisterCCallable("actionet", "_actionet_orthogonalize_basal", (DL_FUNC)_actionet_orthogonalize_basal_try);
    R_RegisterCCallable("actionet", "_actionet_orthogonalize_basal_full", (DL_FUNC)_actionet_orthogonalize_basal_full_try);
    R_RegisterCCallable("actionet", "_actionet_run_simplex_regression", (DL_FUNC)_actionet_run_simplex_regression_try);
    R_RegisterCCallable("actionet", "_actionet_buildNetwork", (DL_FUNC)_actionet_buildNetwork_try);
    R_RegisterCCallable("actionet", "_actionet_layoutNetwork", (DL_FUNC)_actionet_layoutNetwork_try);
    R_RegisterCCallable("actionet", "_actionet_compute_grouped_rowsums", (DL_FUNC)_actionet_compute_grouped_rowsums_try);
    R_RegisterCCallable("actionet", "_actionet_compute_grouped_rowsums_full", (DL_FUNC)_actionet_compute_grouped_rowsums_full_try);
    R_RegisterCCallable("actionet", "_actionet_compute_grouped_rowmeans", (DL_FUNC)_actionet_compute_grouped_rowmeans_try);
    R_RegisterCCallable("actionet", "_actionet_compute_grouped_rowmeans_full", (DL_FUNC)_actionet_compute_grouped_rowmeans_full_try);
    R_RegisterCCallable("actionet", "_actionet_compute_grouped_rowvars", (DL_FUNC)_actionet_compute_grouped_rowvars_try);
    R_RegisterCCallable("actionet", "_actionet_compute_grouped_rowvars_full", (DL_FUNC)_actionet_compute_grouped_rowvars_full_try);
    R_RegisterCCallable("actionet", "_actionet_compute_archetype_feature_specificity", (DL_FUNC)_actionet_compute_archetype_feature_specificity_try);
    R_RegisterCCallable("actionet", "_actionet_compute_archetype_feature_specificity_full", (DL_FUNC)_actionet_compute_archetype_feature_specificity_full_try);
    R_RegisterCCallable("actionet", "_actionet_compute_cluster_feature_specificity", (DL_FUNC)_actionet_compute_cluster_feature_specificity_try);
    R_RegisterCCallable("actionet", "_actionet_compute_cluster_feature_specificity_full", (DL_FUNC)_actionet_compute_cluster_feature_specificity_full_try);
    R_RegisterCCallable("actionet", "_actionet_compute_core_number", (DL_FUNC)_actionet_compute_core_number_try);
    R_RegisterCCallable("actionet", "_actionet_compute_archetype_core_centrality", (DL_FUNC)_actionet_compute_archetype_core_centrality_try);
    R_RegisterCCallable("actionet", "_actionet_compute_network_diffusion_fast", (DL_FUNC)_actionet_compute_network_diffusion_fast_try);
    R_RegisterCCallable("actionet", "_actionet_assess_enrichment", (DL_FUNC)_actionet_assess_enrichment_try);
    R_RegisterCCallable("actionet", "_actionet_MWM_hungarian", (DL_FUNC)_actionet_MWM_hungarian_try);
    R_RegisterCCallable("actionet", "_actionet_MWM_rank1", (DL_FUNC)_actionet_MWM_rank1_try);
    R_RegisterCCallable("actionet", "_actionet_run_LPA", (DL_FUNC)_actionet_run_LPA_try);
    R_RegisterCCallable("actionet", "_actionet_compute_marker_aggregate_stats", (DL_FUNC)_actionet_compute_marker_aggregate_stats_try);
    R_RegisterCCallable("actionet", "_actionet_LSI", (DL_FUNC)_actionet_LSI_try);
    R_RegisterCCallable("actionet", "_actionet_autocorrelation_Geary", (DL_FUNC)_actionet_autocorrelation_Geary_try);
    R_RegisterCCallable("actionet", "_actionet_autocorrelation_Geary_full", (DL_FUNC)_actionet_autocorrelation_Geary_full_try);
    R_RegisterCCallable("actionet", "_actionet_autocorrelation_Moran", (DL_FUNC)_actionet_autocorrelation_Moran_try);
    R_RegisterCCallable("actionet", "_actionet_autocorrelation_Moran_full", (DL_FUNC)_actionet_autocorrelation_Moran_full_try);
    R_RegisterCCallable("actionet", "_actionet_compute_network_diffusion_approx", (DL_FUNC)_actionet_compute_network_diffusion_approx_try);
    R_RegisterCCallable("actionet", "_actionet_aggregate_genesets_mahalanobis_2archs", (DL_FUNC)_actionet_aggregate_genesets_mahalanobis_2archs_try);
    R_RegisterCCallable("actionet", "_actionet_aggregate_genesets_mahalanobis_2gmm", (DL_FUNC)_actionet_aggregate_genesets_mahalanobis_2gmm_try);
    R_RegisterCCallable("actionet", "_actionet_normalize_mat", (DL_FUNC)_actionet_normalize_mat_try);
    R_RegisterCCallable("actionet", "_actionet_normalize_spmat", (DL_FUNC)_actionet_normalize_spmat_try);
    R_RegisterCCallable("actionet", "_actionet_xicor", (DL_FUNC)_actionet_xicor_try);
    R_RegisterCCallable("actionet", "_actionet_XICOR", (DL_FUNC)_actionet_XICOR_try);
    R_RegisterCCallable("actionet", "_actionet_aggregate_genesets", (DL_FUNC)_actionet_aggregate_genesets_try);
    R_RegisterCCallable("actionet", "_actionet_assess_label_enrichment", (DL_FUNC)_actionet_assess_label_enrichment_try);
    R_RegisterCCallable("actionet", "_actionet_autocorrelation_Moran_parametric_full", (DL_FUNC)_actionet_autocorrelation_Moran_parametric_full_try);
    R_RegisterCCallable("actionet", "_actionet_autocorrelation_Moran_parametric", (DL_FUNC)_actionet_autocorrelation_Moran_parametric_try);
    R_RegisterCCallable("actionet", "_actionet_run_AA", (DL_FUNC)_actionet_run_AA_try);
    R_RegisterCCallable("actionet", "_actionet_run_ACTION", (DL_FUNC)_actionet_run_ACTION_try);
    R_RegisterCCallable("actionet", "_actionet_collect_archetypes", (DL_FUNC)_actionet_collect_archetypes_try);
    R_RegisterCCallable("actionet", "_actionet_merge_archetypes", (DL_FUNC)_actionet_merge_archetypes_try);
    R_RegisterCCallable("actionet", "_actionet_reduce_kernel", (DL_FUNC)_actionet_reduce_kernel_try);
    R_RegisterCCallable("actionet", "_actionet_reduce_kernel_full", (DL_FUNC)_actionet_reduce_kernel_full_try);
    R_RegisterCCallable("actionet", "_actionet_run_SPA", (DL_FUNC)_actionet_run_SPA_try);
    R_RegisterCCallable("actionet", "_actionet_RcppExport_validate", (DL_FUNC)_actionet_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_actionet_set_seed", (DL_FUNC) &_actionet_set_seed, 1},
    {"_actionet_runSVD", (DL_FUNC) &_actionet_runSVD, 6},
    {"_actionet_runSVD_full", (DL_FUNC) &_actionet_runSVD_full, 6},
    {"_actionet_perturbedSVD", (DL_FUNC) &_actionet_perturbedSVD, 5},
    {"_actionet_orthogonalize_batch_effect", (DL_FUNC) &_actionet_orthogonalize_batch_effect, 7},
    {"_actionet_orthogonalize_batch_effect_full", (DL_FUNC) &_actionet_orthogonalize_batch_effect_full, 7},
    {"_actionet_orthogonalize_basal", (DL_FUNC) &_actionet_orthogonalize_basal, 7},
    {"_actionet_orthogonalize_basal_full", (DL_FUNC) &_actionet_orthogonalize_basal_full, 7},
    {"_actionet_run_simplex_regression", (DL_FUNC) &_actionet_run_simplex_regression, 3},
    {"_actionet_buildNetwork", (DL_FUNC) &_actionet_buildNetwork, 7},
    {"_actionet_layoutNetwork", (DL_FUNC) &_actionet_layoutNetwork, 12},
    {"_actionet_compute_grouped_rowsums", (DL_FUNC) &_actionet_compute_grouped_rowsums, 2},
    {"_actionet_compute_grouped_rowsums_full", (DL_FUNC) &_actionet_compute_grouped_rowsums_full, 2},
    {"_actionet_compute_grouped_rowmeans", (DL_FUNC) &_actionet_compute_grouped_rowmeans, 2},
    {"_actionet_compute_grouped_rowmeans_full", (DL_FUNC) &_actionet_compute_grouped_rowmeans_full, 2},
    {"_actionet_compute_grouped_rowvars", (DL_FUNC) &_actionet_compute_grouped_rowvars, 2},
    {"_actionet_compute_grouped_rowvars_full", (DL_FUNC) &_actionet_compute_grouped_rowvars_full, 2},
    {"_actionet_compute_archetype_feature_specificity", (DL_FUNC) &_actionet_compute_archetype_feature_specificity, 3},
    {"_actionet_compute_archetype_feature_specificity_full", (DL_FUNC) &_actionet_compute_archetype_feature_specificity_full, 3},
    {"_actionet_compute_cluster_feature_specificity", (DL_FUNC) &_actionet_compute_cluster_feature_specificity, 3},
    {"_actionet_compute_cluster_feature_specificity_full", (DL_FUNC) &_actionet_compute_cluster_feature_specificity_full, 3},
    {"_actionet_compute_core_number", (DL_FUNC) &_actionet_compute_core_number, 1},
    {"_actionet_compute_archetype_core_centrality", (DL_FUNC) &_actionet_compute_archetype_core_centrality, 2},
    {"_actionet_compute_network_diffusion_fast", (DL_FUNC) &_actionet_compute_network_diffusion_fast, 5},
    {"_actionet_assess_enrichment", (DL_FUNC) &_actionet_assess_enrichment, 3},
    {"_actionet_MWM_hungarian", (DL_FUNC) &_actionet_MWM_hungarian, 1},
    {"_actionet_MWM_rank1", (DL_FUNC) &_actionet_MWM_rank1, 4},
    {"_actionet_run_LPA", (DL_FUNC) &_actionet_run_LPA, 7},
    {"_actionet_compute_marker_aggregate_stats", (DL_FUNC) &_actionet_compute_marker_aggregate_stats, 7},
    {"_actionet_LSI", (DL_FUNC) &_actionet_LSI, 2},
    {"_actionet_autocorrelation_Geary", (DL_FUNC) &_actionet_autocorrelation_Geary, 5},
    {"_actionet_autocorrelation_Geary_full", (DL_FUNC) &_actionet_autocorrelation_Geary_full, 5},
    {"_actionet_autocorrelation_Moran", (DL_FUNC) &_actionet_autocorrelation_Moran, 5},
    {"_actionet_autocorrelation_Moran_full", (DL_FUNC) &_actionet_autocorrelation_Moran_full, 5},
    {"_actionet_compute_network_diffusion_approx", (DL_FUNC) &_actionet_compute_network_diffusion_approx, 7},
    {"_actionet_aggregate_genesets_mahalanobis_2archs", (DL_FUNC) &_actionet_aggregate_genesets_mahalanobis_2archs, 9},
    {"_actionet_aggregate_genesets_mahalanobis_2gmm", (DL_FUNC) &_actionet_aggregate_genesets_mahalanobis_2gmm, 9},
    {"_actionet_normalize_mat", (DL_FUNC) &_actionet_normalize_mat, 3},
    {"_actionet_normalize_spmat", (DL_FUNC) &_actionet_normalize_spmat, 3},
    {"_actionet_xicor", (DL_FUNC) &_actionet_xicor, 4},
    {"_actionet_XICOR", (DL_FUNC) &_actionet_XICOR, 5},
    {"_actionet_aggregate_genesets", (DL_FUNC) &_actionet_aggregate_genesets, 6},
    {"_actionet_assess_label_enrichment", (DL_FUNC) &_actionet_assess_label_enrichment, 3},
    {"_actionet_autocorrelation_Moran_parametric_full", (DL_FUNC) &_actionet_autocorrelation_Moran_parametric_full, 4},
    {"_actionet_autocorrelation_Moran_parametric", (DL_FUNC) &_actionet_autocorrelation_Moran_parametric, 4},
    {"_actionet_run_AA", (DL_FUNC) &_actionet_run_AA, 4},
    {"_actionet_run_ACTION", (DL_FUNC) &_actionet_run_ACTION, 7},
    {"_actionet_collect_archetypes", (DL_FUNC) &_actionet_collect_archetypes, 4},
    {"_actionet_merge_archetypes", (DL_FUNC) &_actionet_merge_archetypes, 5},
    {"_actionet_reduce_kernel", (DL_FUNC) &_actionet_reduce_kernel, 6},
    {"_actionet_reduce_kernel_full", (DL_FUNC) &_actionet_reduce_kernel_full, 7},
    {"_actionet_run_SPA", (DL_FUNC) &_actionet_run_SPA, 2},
    {"_actionet_RcppExport_registerCCallable", (DL_FUNC) &_actionet_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_actionet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
