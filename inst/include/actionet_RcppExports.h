// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_actionet_RCPPEXPORTS_H_GEN_
#define RCPP_actionet_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace actionet {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("actionet", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("actionet", "_actionet_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in actionet");
            }
        }
    }

    inline Rcpp::List run_AA(arma::mat& A, arma::mat& W0, int max_it = 100, double tol = 1e-6) {
        typedef SEXP(*Ptr_run_AA)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_run_AA p_run_AA = NULL;
        if (p_run_AA == NULL) {
            validateSignature("Rcpp::List(*run_AA)(arma::mat&,arma::mat&,int,double)");
            p_run_AA = (Ptr_run_AA)R_GetCCallable("actionet", "_actionet_run_AA");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_AA(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(W0)), Shield<SEXP>(Rcpp::wrap(max_it)), Shield<SEXP>(Rcpp::wrap(tol)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List run_ACTION(arma::mat& S_r, int k_min = 2, int k_max = 30, int normalization = 1, int max_it = 100, double tol = 1e-6, int thread_no = 0) {
        typedef SEXP(*Ptr_run_ACTION)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_run_ACTION p_run_ACTION = NULL;
        if (p_run_ACTION == NULL) {
            validateSignature("Rcpp::List(*run_ACTION)(arma::mat&,int,int,int,int,double,int)");
            p_run_ACTION = (Ptr_run_ACTION)R_GetCCallable("actionet", "_actionet_run_ACTION");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_ACTION(Shield<SEXP>(Rcpp::wrap(S_r)), Shield<SEXP>(Rcpp::wrap(k_min)), Shield<SEXP>(Rcpp::wrap(k_max)), Shield<SEXP>(Rcpp::wrap(normalization)), Shield<SEXP>(Rcpp::wrap(max_it)), Shield<SEXP>(Rcpp::wrap(tol)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List collect_archetypes(const Rcpp::List& C_trace, const Rcpp::List& H_trace, double spec_th = -3, int min_obs = 3) {
        typedef SEXP(*Ptr_collect_archetypes)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_collect_archetypes p_collect_archetypes = NULL;
        if (p_collect_archetypes == NULL) {
            validateSignature("Rcpp::List(*collect_archetypes)(const Rcpp::List&,const Rcpp::List&,double,int)");
            p_collect_archetypes = (Ptr_collect_archetypes)R_GetCCallable("actionet", "_actionet_collect_archetypes");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_collect_archetypes(Shield<SEXP>(Rcpp::wrap(C_trace)), Shield<SEXP>(Rcpp::wrap(H_trace)), Shield<SEXP>(Rcpp::wrap(spec_th)), Shield<SEXP>(Rcpp::wrap(min_obs)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List merge_archetypes(arma::mat& S_r, arma::mat C_stacked, arma::mat H_stacked, int normalization = 0, int thread_no = 0) {
        typedef SEXP(*Ptr_merge_archetypes)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_merge_archetypes p_merge_archetypes = NULL;
        if (p_merge_archetypes == NULL) {
            validateSignature("Rcpp::List(*merge_archetypes)(arma::mat&,arma::mat,arma::mat,int,int)");
            p_merge_archetypes = (Ptr_merge_archetypes)R_GetCCallable("actionet", "_actionet_merge_archetypes");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_merge_archetypes(Shield<SEXP>(Rcpp::wrap(S_r)), Shield<SEXP>(Rcpp::wrap(C_stacked)), Shield<SEXP>(Rcpp::wrap(H_stacked)), Shield<SEXP>(Rcpp::wrap(normalization)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List reduce_kernel(arma::sp_mat& S, int reduced_dim = 50, int iter = 5, int seed = 0, int SVD_algorithm = 0, int verbose = 1) {
        typedef SEXP(*Ptr_reduce_kernel)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_reduce_kernel p_reduce_kernel = NULL;
        if (p_reduce_kernel == NULL) {
            validateSignature("Rcpp::List(*reduce_kernel)(arma::sp_mat&,int,int,int,int,int)");
            p_reduce_kernel = (Ptr_reduce_kernel)R_GetCCallable("actionet", "_actionet_reduce_kernel");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_reduce_kernel(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(reduced_dim)), Shield<SEXP>(Rcpp::wrap(iter)), Shield<SEXP>(Rcpp::wrap(seed)), Shield<SEXP>(Rcpp::wrap(SVD_algorithm)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List reduce_kernel_full(arma::mat& S, int reduced_dim = 50, int iter = 5, int seed = 0, int SVD_algorithm = 0, int verbose = 1) {
        typedef SEXP(*Ptr_reduce_kernel_full)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_reduce_kernel_full p_reduce_kernel_full = NULL;
        if (p_reduce_kernel_full == NULL) {
            validateSignature("Rcpp::List(*reduce_kernel_full)(arma::mat&,int,int,int,int,int)");
            p_reduce_kernel_full = (Ptr_reduce_kernel_full)R_GetCCallable("actionet", "_actionet_reduce_kernel_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_reduce_kernel_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(reduced_dim)), Shield<SEXP>(Rcpp::wrap(iter)), Shield<SEXP>(Rcpp::wrap(seed)), Shield<SEXP>(Rcpp::wrap(SVD_algorithm)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline arma::mat run_simplex_regression(arma::mat& A, arma::mat& B, bool computeXtX = false) {
        typedef SEXP(*Ptr_run_simplex_regression)(SEXP,SEXP,SEXP);
        static Ptr_run_simplex_regression p_run_simplex_regression = NULL;
        if (p_run_simplex_regression == NULL) {
            validateSignature("arma::mat(*run_simplex_regression)(arma::mat&,arma::mat&,bool)");
            p_run_simplex_regression = (Ptr_run_simplex_regression)R_GetCCallable("actionet", "_actionet_run_simplex_regression");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_simplex_regression(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(B)), Shield<SEXP>(Rcpp::wrap(computeXtX)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline Rcpp::List run_SPA(arma::mat& A, int k) {
        typedef SEXP(*Ptr_run_SPA)(SEXP,SEXP);
        static Ptr_run_SPA p_run_SPA = NULL;
        if (p_run_SPA == NULL) {
            validateSignature("Rcpp::List(*run_SPA)(arma::mat&,int)");
            p_run_SPA = (Ptr_run_SPA)R_GetCCallable("actionet", "_actionet_run_SPA");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_SPA(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline arma::mat compute_marker_aggregate_stats(arma::sp_mat& G, arma::sp_mat& S, arma::sp_mat& marker_mat, double alpha = 0.85, int max_it = 5, int thread_no = 0, bool ignore_baseline_expression = false) {
        typedef SEXP(*Ptr_compute_marker_aggregate_stats)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_compute_marker_aggregate_stats p_compute_marker_aggregate_stats = NULL;
        if (p_compute_marker_aggregate_stats == NULL) {
            validateSignature("arma::mat(*compute_marker_aggregate_stats)(arma::sp_mat&,arma::sp_mat&,arma::sp_mat&,double,int,int,bool)");
            p_compute_marker_aggregate_stats = (Ptr_compute_marker_aggregate_stats)R_GetCCallable("actionet", "_actionet_compute_marker_aggregate_stats");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_marker_aggregate_stats(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(marker_mat)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(max_it)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(ignore_baseline_expression)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline Rcpp::List aggregate_genesets_vision(arma::sp_mat& G, arma::sp_mat& S, arma::mat& marker_mat, int network_normalization_method = 0, double alpha = 0.85, int thread_no = 0) {
        typedef SEXP(*Ptr_aggregate_genesets_vision)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_aggregate_genesets_vision p_aggregate_genesets_vision = NULL;
        if (p_aggregate_genesets_vision == NULL) {
            validateSignature("Rcpp::List(*aggregate_genesets_vision)(arma::sp_mat&,arma::sp_mat&,arma::mat&,int,double,int)");
            p_aggregate_genesets_vision = (Ptr_aggregate_genesets_vision)R_GetCCallable("actionet", "_actionet_aggregate_genesets_vision");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_aggregate_genesets_vision(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(marker_mat)), Shield<SEXP>(Rcpp::wrap(network_normalization_method)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List compute_archetype_feature_specificity(arma::sp_mat& S, arma::mat& H, int thread_no = 0) {
        typedef SEXP(*Ptr_compute_archetype_feature_specificity)(SEXP,SEXP,SEXP);
        static Ptr_compute_archetype_feature_specificity p_compute_archetype_feature_specificity = NULL;
        if (p_compute_archetype_feature_specificity == NULL) {
            validateSignature("Rcpp::List(*compute_archetype_feature_specificity)(arma::sp_mat&,arma::mat&,int)");
            p_compute_archetype_feature_specificity = (Ptr_compute_archetype_feature_specificity)R_GetCCallable("actionet", "_actionet_compute_archetype_feature_specificity");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_archetype_feature_specificity(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(H)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List compute_archetype_feature_specificity_full(arma::mat& S, arma::mat& H, int thread_no = 0) {
        typedef SEXP(*Ptr_compute_archetype_feature_specificity_full)(SEXP,SEXP,SEXP);
        static Ptr_compute_archetype_feature_specificity_full p_compute_archetype_feature_specificity_full = NULL;
        if (p_compute_archetype_feature_specificity_full == NULL) {
            validateSignature("Rcpp::List(*compute_archetype_feature_specificity_full)(arma::mat&,arma::mat&,int)");
            p_compute_archetype_feature_specificity_full = (Ptr_compute_archetype_feature_specificity_full)R_GetCCallable("actionet", "_actionet_compute_archetype_feature_specificity_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_archetype_feature_specificity_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(H)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List compute_cluster_feature_specificity(arma::sp_mat& S, arma::uvec sample_assignments, int thread_no = 0) {
        typedef SEXP(*Ptr_compute_cluster_feature_specificity)(SEXP,SEXP,SEXP);
        static Ptr_compute_cluster_feature_specificity p_compute_cluster_feature_specificity = NULL;
        if (p_compute_cluster_feature_specificity == NULL) {
            validateSignature("Rcpp::List(*compute_cluster_feature_specificity)(arma::sp_mat&,arma::uvec,int)");
            p_compute_cluster_feature_specificity = (Ptr_compute_cluster_feature_specificity)R_GetCCallable("actionet", "_actionet_compute_cluster_feature_specificity");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_cluster_feature_specificity(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(sample_assignments)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List compute_cluster_feature_specificity_full(arma::mat& S, arma::uvec sample_assignments, int thread_no = 0) {
        typedef SEXP(*Ptr_compute_cluster_feature_specificity_full)(SEXP,SEXP,SEXP);
        static Ptr_compute_cluster_feature_specificity_full p_compute_cluster_feature_specificity_full = NULL;
        if (p_compute_cluster_feature_specificity_full == NULL) {
            validateSignature("Rcpp::List(*compute_cluster_feature_specificity_full)(arma::mat&,arma::uvec,int)");
            p_compute_cluster_feature_specificity_full = (Ptr_compute_cluster_feature_specificity_full)R_GetCCallable("actionet", "_actionet_compute_cluster_feature_specificity_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_cluster_feature_specificity_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(sample_assignments)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List orthogonalize_batch_effect(arma::sp_mat& S, arma::mat& old_S_r, arma::mat& old_V, arma::mat& old_A, arma::mat& old_B, arma::vec& old_sigma, arma::mat& design) {
        typedef SEXP(*Ptr_orthogonalize_batch_effect)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_orthogonalize_batch_effect p_orthogonalize_batch_effect = NULL;
        if (p_orthogonalize_batch_effect == NULL) {
            validateSignature("Rcpp::List(*orthogonalize_batch_effect)(arma::sp_mat&,arma::mat&,arma::mat&,arma::mat&,arma::mat&,arma::vec&,arma::mat&)");
            p_orthogonalize_batch_effect = (Ptr_orthogonalize_batch_effect)R_GetCCallable("actionet", "_actionet_orthogonalize_batch_effect");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_orthogonalize_batch_effect(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(old_S_r)), Shield<SEXP>(Rcpp::wrap(old_V)), Shield<SEXP>(Rcpp::wrap(old_A)), Shield<SEXP>(Rcpp::wrap(old_B)), Shield<SEXP>(Rcpp::wrap(old_sigma)), Shield<SEXP>(Rcpp::wrap(design)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List orthogonalize_batch_effect_full(arma::mat& S, arma::mat& old_S_r, arma::mat& old_V, arma::mat& old_A, arma::mat& old_B, arma::vec& old_sigma, arma::mat& design) {
        typedef SEXP(*Ptr_orthogonalize_batch_effect_full)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_orthogonalize_batch_effect_full p_orthogonalize_batch_effect_full = NULL;
        if (p_orthogonalize_batch_effect_full == NULL) {
            validateSignature("Rcpp::List(*orthogonalize_batch_effect_full)(arma::mat&,arma::mat&,arma::mat&,arma::mat&,arma::mat&,arma::vec&,arma::mat&)");
            p_orthogonalize_batch_effect_full = (Ptr_orthogonalize_batch_effect_full)R_GetCCallable("actionet", "_actionet_orthogonalize_batch_effect_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_orthogonalize_batch_effect_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(old_S_r)), Shield<SEXP>(Rcpp::wrap(old_V)), Shield<SEXP>(Rcpp::wrap(old_A)), Shield<SEXP>(Rcpp::wrap(old_B)), Shield<SEXP>(Rcpp::wrap(old_sigma)), Shield<SEXP>(Rcpp::wrap(design)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List orthogonalize_basal(arma::sp_mat& S, arma::mat& old_S_r, arma::mat& old_V, arma::mat& old_A, arma::mat& old_B, arma::vec& old_sigma, arma::mat& basal) {
        typedef SEXP(*Ptr_orthogonalize_basal)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_orthogonalize_basal p_orthogonalize_basal = NULL;
        if (p_orthogonalize_basal == NULL) {
            validateSignature("Rcpp::List(*orthogonalize_basal)(arma::sp_mat&,arma::mat&,arma::mat&,arma::mat&,arma::mat&,arma::vec&,arma::mat&)");
            p_orthogonalize_basal = (Ptr_orthogonalize_basal)R_GetCCallable("actionet", "_actionet_orthogonalize_basal");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_orthogonalize_basal(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(old_S_r)), Shield<SEXP>(Rcpp::wrap(old_V)), Shield<SEXP>(Rcpp::wrap(old_A)), Shield<SEXP>(Rcpp::wrap(old_B)), Shield<SEXP>(Rcpp::wrap(old_sigma)), Shield<SEXP>(Rcpp::wrap(basal)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List orthogonalize_basal_full(arma::mat& S, arma::mat& old_S_r, arma::mat& old_V, arma::mat& old_A, arma::mat& old_B, arma::vec& old_sigma, arma::mat& basal) {
        typedef SEXP(*Ptr_orthogonalize_basal_full)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_orthogonalize_basal_full p_orthogonalize_basal_full = NULL;
        if (p_orthogonalize_basal_full == NULL) {
            validateSignature("Rcpp::List(*orthogonalize_basal_full)(arma::mat&,arma::mat&,arma::mat&,arma::mat&,arma::mat&,arma::vec&,arma::mat&)");
            p_orthogonalize_basal_full = (Ptr_orthogonalize_basal_full)R_GetCCallable("actionet", "_actionet_orthogonalize_basal_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_orthogonalize_basal_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(old_S_r)), Shield<SEXP>(Rcpp::wrap(old_V)), Shield<SEXP>(Rcpp::wrap(old_A)), Shield<SEXP>(Rcpp::wrap(old_B)), Shield<SEXP>(Rcpp::wrap(old_sigma)), Shield<SEXP>(Rcpp::wrap(basal)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List runSVD(arma::sp_mat& A, int k = 30, int max_it = 0, int seed = 0, int algorithm = 0, int verbose = 1) {
        typedef SEXP(*Ptr_runSVD)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_runSVD p_runSVD = NULL;
        if (p_runSVD == NULL) {
            validateSignature("Rcpp::List(*runSVD)(arma::sp_mat&,int,int,int,int,int)");
            p_runSVD = (Ptr_runSVD)R_GetCCallable("actionet", "_actionet_runSVD");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_runSVD(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(k)), Shield<SEXP>(Rcpp::wrap(max_it)), Shield<SEXP>(Rcpp::wrap(seed)), Shield<SEXP>(Rcpp::wrap(algorithm)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List runSVD_full(arma::mat& A, int k = 30, int max_it = 0, int seed = 0, int algorithm = 0, int verbose = 1) {
        typedef SEXP(*Ptr_runSVD_full)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_runSVD_full p_runSVD_full = NULL;
        if (p_runSVD_full == NULL) {
            validateSignature("Rcpp::List(*runSVD_full)(arma::mat&,int,int,int,int,int)");
            p_runSVD_full = (Ptr_runSVD_full)R_GetCCallable("actionet", "_actionet_runSVD_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_runSVD_full(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(k)), Shield<SEXP>(Rcpp::wrap(max_it)), Shield<SEXP>(Rcpp::wrap(seed)), Shield<SEXP>(Rcpp::wrap(algorithm)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List perturbedSVD(arma::mat u, arma::vec d, arma::mat v, arma::mat A, arma::mat B) {
        typedef SEXP(*Ptr_perturbedSVD)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_perturbedSVD p_perturbedSVD = NULL;
        if (p_perturbedSVD == NULL) {
            validateSignature("Rcpp::List(*perturbedSVD)(arma::mat,arma::vec,arma::mat,arma::mat,arma::mat)");
            p_perturbedSVD = (Ptr_perturbedSVD)R_GetCCallable("actionet", "_actionet_perturbedSVD");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_perturbedSVD(Shield<SEXP>(Rcpp::wrap(u)), Shield<SEXP>(Rcpp::wrap(d)), Shield<SEXP>(Rcpp::wrap(v)), Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(B)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline arma::sp_mat buildNetwork(arma::mat H, std::string algorithm = "k*nn", std::string distance_metric = "jsd", double density = 1.0, int thread_no = 0, bool mutual_edges_only = true, int k = 10) {
        typedef SEXP(*Ptr_buildNetwork)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_buildNetwork p_buildNetwork = NULL;
        if (p_buildNetwork == NULL) {
            validateSignature("arma::sp_mat(*buildNetwork)(arma::mat,std::string,std::string,double,int,bool,int)");
            p_buildNetwork = (Ptr_buildNetwork)R_GetCCallable("actionet", "_actionet_buildNetwork");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_buildNetwork(Shield<SEXP>(Rcpp::wrap(H)), Shield<SEXP>(Rcpp::wrap(algorithm)), Shield<SEXP>(Rcpp::wrap(distance_metric)), Shield<SEXP>(Rcpp::wrap(density)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(mutual_edges_only)), Shield<SEXP>(Rcpp::wrap(k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::sp_mat >(rcpp_result_gen);
    }

    inline arma::vec run_LPA(arma::sp_mat& G, arma::vec labels, double lambda = 1, int iters = 3, double sig_threshold = 3, Rcpp::Nullable<Rcpp::IntegerVector> fixed_labels_ = R_NilValue, int thread_no = 0) {
        typedef SEXP(*Ptr_run_LPA)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_run_LPA p_run_LPA = NULL;
        if (p_run_LPA == NULL) {
            validateSignature("arma::vec(*run_LPA)(arma::sp_mat&,arma::vec,double,int,double,Rcpp::Nullable<Rcpp::IntegerVector>,int)");
            p_run_LPA = (Ptr_run_LPA)R_GetCCallable("actionet", "_actionet_run_LPA");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_LPA(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(labels)), Shield<SEXP>(Rcpp::wrap(lambda)), Shield<SEXP>(Rcpp::wrap(iters)), Shield<SEXP>(Rcpp::wrap(sig_threshold)), Shield<SEXP>(Rcpp::wrap(fixed_labels_)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::mat compute_network_diffusion_fast(arma::sp_mat& G, arma::sp_mat& X0, int thread_no = 0, double alpha = 0.85, int max_it = 3) {
        typedef SEXP(*Ptr_compute_network_diffusion_fast)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_compute_network_diffusion_fast p_compute_network_diffusion_fast = NULL;
        if (p_compute_network_diffusion_fast == NULL) {
            validateSignature("arma::mat(*compute_network_diffusion_fast)(arma::sp_mat&,arma::sp_mat&,int,double,int)");
            p_compute_network_diffusion_fast = (Ptr_compute_network_diffusion_fast)R_GetCCallable("actionet", "_actionet_compute_network_diffusion_fast");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_network_diffusion_fast(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(X0)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(max_it)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat compute_network_diffusion_approx(arma::sp_mat& G, arma::mat& X0, int thread_no = 0, double alpha = 0.85, int max_it = 5, double res_threshold = 1e-8, int norm_type = 0) {
        typedef SEXP(*Ptr_compute_network_diffusion_approx)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_compute_network_diffusion_approx p_compute_network_diffusion_approx = NULL;
        if (p_compute_network_diffusion_approx == NULL) {
            validateSignature("arma::mat(*compute_network_diffusion_approx)(arma::sp_mat&,arma::mat&,int,double,int,double,int)");
            p_compute_network_diffusion_approx = (Ptr_compute_network_diffusion_approx)R_GetCCallable("actionet", "_actionet_compute_network_diffusion_approx");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_network_diffusion_approx(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(X0)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(max_it)), Shield<SEXP>(Rcpp::wrap(res_threshold)), Shield<SEXP>(Rcpp::wrap(norm_type)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::uvec compute_core_number(arma::sp_mat& G) {
        typedef SEXP(*Ptr_compute_core_number)(SEXP);
        static Ptr_compute_core_number p_compute_core_number = NULL;
        if (p_compute_core_number == NULL) {
            validateSignature("arma::uvec(*compute_core_number)(arma::sp_mat&)");
            p_compute_core_number = (Ptr_compute_core_number)R_GetCCallable("actionet", "_actionet_compute_core_number");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_core_number(Shield<SEXP>(Rcpp::wrap(G)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::uvec >(rcpp_result_gen);
    }

    inline arma::vec compute_archetype_core_centrality(arma::sp_mat& G, arma::uvec sample_assignments) {
        typedef SEXP(*Ptr_compute_archetype_core_centrality)(SEXP,SEXP);
        static Ptr_compute_archetype_core_centrality p_compute_archetype_core_centrality = NULL;
        if (p_compute_archetype_core_centrality == NULL) {
            validateSignature("arma::vec(*compute_archetype_core_centrality)(arma::sp_mat&,arma::uvec)");
            p_compute_archetype_core_centrality = (Ptr_compute_archetype_core_centrality)R_GetCCallable("actionet", "_actionet_compute_archetype_core_centrality");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_archetype_core_centrality(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(sample_assignments)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline Rcpp::List autocorrelation_Moran_parametric_full(arma::mat G, arma::mat scores, int normalization_method = 4, int thread_no = 0) {
        typedef SEXP(*Ptr_autocorrelation_Moran_parametric_full)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_autocorrelation_Moran_parametric_full p_autocorrelation_Moran_parametric_full = NULL;
        if (p_autocorrelation_Moran_parametric_full == NULL) {
            validateSignature("Rcpp::List(*autocorrelation_Moran_parametric_full)(arma::mat,arma::mat,int,int)");
            p_autocorrelation_Moran_parametric_full = (Ptr_autocorrelation_Moran_parametric_full)R_GetCCallable("actionet", "_actionet_autocorrelation_Moran_parametric_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_autocorrelation_Moran_parametric_full(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(scores)), Shield<SEXP>(Rcpp::wrap(normalization_method)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List autocorrelation_Moran_parametric(arma::sp_mat G, arma::mat scores, int normalization_method = 4, int thread_no = 0) {
        typedef SEXP(*Ptr_autocorrelation_Moran_parametric)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_autocorrelation_Moran_parametric p_autocorrelation_Moran_parametric = NULL;
        if (p_autocorrelation_Moran_parametric == NULL) {
            validateSignature("Rcpp::List(*autocorrelation_Moran_parametric)(arma::sp_mat,arma::mat,int,int)");
            p_autocorrelation_Moran_parametric = (Ptr_autocorrelation_Moran_parametric)R_GetCCallable("actionet", "_actionet_autocorrelation_Moran_parametric");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_autocorrelation_Moran_parametric(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(scores)), Shield<SEXP>(Rcpp::wrap(normalization_method)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List autocorrelation_Moran(arma::sp_mat G, arma::mat scores, int normalization_method = 1, int perm_no = 30, int thread_no = 0) {
        typedef SEXP(*Ptr_autocorrelation_Moran)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_autocorrelation_Moran p_autocorrelation_Moran = NULL;
        if (p_autocorrelation_Moran == NULL) {
            validateSignature("Rcpp::List(*autocorrelation_Moran)(arma::sp_mat,arma::mat,int,int,int)");
            p_autocorrelation_Moran = (Ptr_autocorrelation_Moran)R_GetCCallable("actionet", "_actionet_autocorrelation_Moran");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_autocorrelation_Moran(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(scores)), Shield<SEXP>(Rcpp::wrap(normalization_method)), Shield<SEXP>(Rcpp::wrap(perm_no)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List autocorrelation_Moran_full(arma::mat G, arma::mat scores, int normalization_method = 1, int perm_no = 30, int thread_no = 0) {
        typedef SEXP(*Ptr_autocorrelation_Moran_full)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_autocorrelation_Moran_full p_autocorrelation_Moran_full = NULL;
        if (p_autocorrelation_Moran_full == NULL) {
            validateSignature("Rcpp::List(*autocorrelation_Moran_full)(arma::mat,arma::mat,int,int,int)");
            p_autocorrelation_Moran_full = (Ptr_autocorrelation_Moran_full)R_GetCCallable("actionet", "_actionet_autocorrelation_Moran_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_autocorrelation_Moran_full(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(scores)), Shield<SEXP>(Rcpp::wrap(normalization_method)), Shield<SEXP>(Rcpp::wrap(perm_no)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List autocorrelation_Geary(arma::sp_mat G, arma::mat scores, int normalization_method = 1, int perm_no = 30, int thread_no = 0) {
        typedef SEXP(*Ptr_autocorrelation_Geary)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_autocorrelation_Geary p_autocorrelation_Geary = NULL;
        if (p_autocorrelation_Geary == NULL) {
            validateSignature("Rcpp::List(*autocorrelation_Geary)(arma::sp_mat,arma::mat,int,int,int)");
            p_autocorrelation_Geary = (Ptr_autocorrelation_Geary)R_GetCCallable("actionet", "_actionet_autocorrelation_Geary");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_autocorrelation_Geary(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(scores)), Shield<SEXP>(Rcpp::wrap(normalization_method)), Shield<SEXP>(Rcpp::wrap(perm_no)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List autocorrelation_Geary_full(arma::mat G, arma::mat scores, int normalization_method = 1, int perm_no = 30, int thread_no = 0) {
        typedef SEXP(*Ptr_autocorrelation_Geary_full)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_autocorrelation_Geary_full p_autocorrelation_Geary_full = NULL;
        if (p_autocorrelation_Geary_full == NULL) {
            validateSignature("Rcpp::List(*autocorrelation_Geary_full)(arma::mat,arma::mat,int,int,int)");
            p_autocorrelation_Geary_full = (Ptr_autocorrelation_Geary_full)R_GetCCallable("actionet", "_actionet_autocorrelation_Geary_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_autocorrelation_Geary_full(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(scores)), Shield<SEXP>(Rcpp::wrap(normalization_method)), Shield<SEXP>(Rcpp::wrap(perm_no)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline arma::mat assess_label_enrichment(arma::sp_mat& G, arma::mat& M, int thread_no = 0) {
        typedef SEXP(*Ptr_assess_label_enrichment)(SEXP,SEXP,SEXP);
        static Ptr_assess_label_enrichment p_assess_label_enrichment = NULL;
        if (p_assess_label_enrichment == NULL) {
            validateSignature("arma::mat(*assess_label_enrichment)(arma::sp_mat&,arma::mat&,int)");
            p_assess_label_enrichment = (Ptr_assess_label_enrichment)R_GetCCallable("actionet", "_actionet_assess_label_enrichment");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_assess_label_enrichment(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(M)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline Rcpp::List assess_enrichment(arma::mat& scores, arma::sp_mat& associations, int thread_no = 0) {
        typedef SEXP(*Ptr_assess_enrichment)(SEXP,SEXP,SEXP);
        static Ptr_assess_enrichment p_assess_enrichment = NULL;
        if (p_assess_enrichment == NULL) {
            validateSignature("Rcpp::List(*assess_enrichment)(arma::mat&,arma::sp_mat&,int)");
            p_assess_enrichment = (Ptr_assess_enrichment)R_GetCCallable("actionet", "_actionet_assess_enrichment");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_assess_enrichment(Shield<SEXP>(Rcpp::wrap(scores)), Shield<SEXP>(Rcpp::wrap(associations)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline arma::mat compute_grouped_rowsums(arma::sp_mat& S, arma::Col<unsigned long long> sample_assignments) {
        typedef SEXP(*Ptr_compute_grouped_rowsums)(SEXP,SEXP);
        static Ptr_compute_grouped_rowsums p_compute_grouped_rowsums = NULL;
        if (p_compute_grouped_rowsums == NULL) {
            validateSignature("arma::mat(*compute_grouped_rowsums)(arma::sp_mat&,arma::Col<unsigned long long>)");
            p_compute_grouped_rowsums = (Ptr_compute_grouped_rowsums)R_GetCCallable("actionet", "_actionet_compute_grouped_rowsums");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_grouped_rowsums(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(sample_assignments)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat compute_grouped_rowsums_full(arma::mat& S, arma::Col<unsigned long long> sample_assignments) {
        typedef SEXP(*Ptr_compute_grouped_rowsums_full)(SEXP,SEXP);
        static Ptr_compute_grouped_rowsums_full p_compute_grouped_rowsums_full = NULL;
        if (p_compute_grouped_rowsums_full == NULL) {
            validateSignature("arma::mat(*compute_grouped_rowsums_full)(arma::mat&,arma::Col<unsigned long long>)");
            p_compute_grouped_rowsums_full = (Ptr_compute_grouped_rowsums_full)R_GetCCallable("actionet", "_actionet_compute_grouped_rowsums_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_grouped_rowsums_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(sample_assignments)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat compute_grouped_rowmeans(arma::sp_mat& S, arma::Col<unsigned long long> sample_assignments) {
        typedef SEXP(*Ptr_compute_grouped_rowmeans)(SEXP,SEXP);
        static Ptr_compute_grouped_rowmeans p_compute_grouped_rowmeans = NULL;
        if (p_compute_grouped_rowmeans == NULL) {
            validateSignature("arma::mat(*compute_grouped_rowmeans)(arma::sp_mat&,arma::Col<unsigned long long>)");
            p_compute_grouped_rowmeans = (Ptr_compute_grouped_rowmeans)R_GetCCallable("actionet", "_actionet_compute_grouped_rowmeans");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_grouped_rowmeans(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(sample_assignments)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat compute_grouped_rowmeans_full(arma::mat& S, arma::Col<unsigned long long> sample_assignments) {
        typedef SEXP(*Ptr_compute_grouped_rowmeans_full)(SEXP,SEXP);
        static Ptr_compute_grouped_rowmeans_full p_compute_grouped_rowmeans_full = NULL;
        if (p_compute_grouped_rowmeans_full == NULL) {
            validateSignature("arma::mat(*compute_grouped_rowmeans_full)(arma::mat&,arma::Col<unsigned long long>)");
            p_compute_grouped_rowmeans_full = (Ptr_compute_grouped_rowmeans_full)R_GetCCallable("actionet", "_actionet_compute_grouped_rowmeans_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_grouped_rowmeans_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(sample_assignments)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat compute_grouped_rowvars(arma::sp_mat& S, arma::Col<unsigned long long> sample_assignments) {
        typedef SEXP(*Ptr_compute_grouped_rowvars)(SEXP,SEXP);
        static Ptr_compute_grouped_rowvars p_compute_grouped_rowvars = NULL;
        if (p_compute_grouped_rowvars == NULL) {
            validateSignature("arma::mat(*compute_grouped_rowvars)(arma::sp_mat&,arma::Col<unsigned long long>)");
            p_compute_grouped_rowvars = (Ptr_compute_grouped_rowvars)R_GetCCallable("actionet", "_actionet_compute_grouped_rowvars");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_grouped_rowvars(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(sample_assignments)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat compute_grouped_rowvars_full(arma::mat& S, arma::Col<unsigned long long> sample_assignments) {
        typedef SEXP(*Ptr_compute_grouped_rowvars_full)(SEXP,SEXP);
        static Ptr_compute_grouped_rowvars_full p_compute_grouped_rowvars_full = NULL;
        if (p_compute_grouped_rowvars_full == NULL) {
            validateSignature("arma::mat(*compute_grouped_rowvars_full)(arma::mat&,arma::Col<unsigned long long>)");
            p_compute_grouped_rowvars_full = (Ptr_compute_grouped_rowvars_full)R_GetCCallable("actionet", "_actionet_compute_grouped_rowvars_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_grouped_rowvars_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(sample_assignments)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat MWM_hungarian(arma::mat& G) {
        typedef SEXP(*Ptr_MWM_hungarian)(SEXP);
        static Ptr_MWM_hungarian p_MWM_hungarian = NULL;
        if (p_MWM_hungarian == NULL) {
            validateSignature("arma::mat(*MWM_hungarian)(arma::mat&)");
            p_MWM_hungarian = (Ptr_MWM_hungarian)R_GetCCallable("actionet", "_actionet_MWM_hungarian");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_MWM_hungarian(Shield<SEXP>(Rcpp::wrap(G)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::umat MWM_rank1(arma::vec u, arma::vec v, double u_threshold = 0, double v_threshold = 0) {
        typedef SEXP(*Ptr_MWM_rank1)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_MWM_rank1 p_MWM_rank1 = NULL;
        if (p_MWM_rank1 == NULL) {
            validateSignature("arma::umat(*MWM_rank1)(arma::vec,arma::vec,double,double)");
            p_MWM_rank1 = (Ptr_MWM_rank1)R_GetCCallable("actionet", "_actionet_MWM_rank1");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_MWM_rank1(Shield<SEXP>(Rcpp::wrap(u)), Shield<SEXP>(Rcpp::wrap(v)), Shield<SEXP>(Rcpp::wrap(u_threshold)), Shield<SEXP>(Rcpp::wrap(v_threshold)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::umat >(rcpp_result_gen);
    }

    inline arma::mat normalize_mat(arma::mat& X, int p = 0, int dim = 0) {
        typedef SEXP(*Ptr_normalize_mat)(SEXP,SEXP,SEXP);
        static Ptr_normalize_mat p_normalize_mat = NULL;
        if (p_normalize_mat == NULL) {
            validateSignature("arma::mat(*normalize_mat)(arma::mat&,int,int)");
            p_normalize_mat = (Ptr_normalize_mat)R_GetCCallable("actionet", "_actionet_normalize_mat");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_normalize_mat(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(p)), Shield<SEXP>(Rcpp::wrap(dim)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::sp_mat normalize_spmat(arma::sp_mat& X, int p = 0, int dim = 0) {
        typedef SEXP(*Ptr_normalize_spmat)(SEXP,SEXP,SEXP);
        static Ptr_normalize_spmat p_normalize_spmat = NULL;
        if (p_normalize_spmat == NULL) {
            validateSignature("arma::sp_mat(*normalize_spmat)(arma::sp_mat&,int,int)");
            p_normalize_spmat = (Ptr_normalize_spmat)R_GetCCallable("actionet", "_actionet_normalize_spmat");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_normalize_spmat(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(p)), Shield<SEXP>(Rcpp::wrap(dim)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::sp_mat >(rcpp_result_gen);
    }

    inline arma::vec xicor(arma::vec xvec, arma::vec yvec, bool compute_pval = true, int seed = 0) {
        typedef SEXP(*Ptr_xicor)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_xicor p_xicor = NULL;
        if (p_xicor == NULL) {
            validateSignature("arma::vec(*xicor)(arma::vec,arma::vec,bool,int)");
            p_xicor = (Ptr_xicor)R_GetCCallable("actionet", "_actionet_xicor");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_xicor(Shield<SEXP>(Rcpp::wrap(xvec)), Shield<SEXP>(Rcpp::wrap(yvec)), Shield<SEXP>(Rcpp::wrap(compute_pval)), Shield<SEXP>(Rcpp::wrap(seed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline Rcpp::List XICOR(arma::mat& X, arma::mat& Y, bool compute_pval = true, int seed = 0, int thread_no = 0) {
        typedef SEXP(*Ptr_XICOR)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_XICOR p_XICOR = NULL;
        if (p_XICOR == NULL) {
            validateSignature("Rcpp::List(*XICOR)(arma::mat&,arma::mat&,bool,int,int)");
            p_XICOR = (Ptr_XICOR)R_GetCCallable("actionet", "_actionet_XICOR");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_XICOR(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(Y)), Shield<SEXP>(Rcpp::wrap(compute_pval)), Shield<SEXP>(Rcpp::wrap(seed)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List layoutNetwork(arma::sp_mat& G, arma::mat& initial_position, const std::string& method = "umap", bool presmooth_network = false, double min_dist = 1, double spread = 1, double gamma = 1.0, unsigned int n_epochs = 500, int thread_no = 0, int seed = 0, double learning_rate = 1.0, int sim2dist = 2) {
        typedef SEXP(*Ptr_layoutNetwork)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_layoutNetwork p_layoutNetwork = NULL;
        if (p_layoutNetwork == NULL) {
            validateSignature("Rcpp::List(*layoutNetwork)(arma::sp_mat&,arma::mat&,const std::string&,bool,double,double,double,unsigned int,int,int,double,int)");
            p_layoutNetwork = (Ptr_layoutNetwork)R_GetCCallable("actionet", "_actionet_layoutNetwork");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_layoutNetwork(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(initial_position)), Shield<SEXP>(Rcpp::wrap(method)), Shield<SEXP>(Rcpp::wrap(presmooth_network)), Shield<SEXP>(Rcpp::wrap(min_dist)), Shield<SEXP>(Rcpp::wrap(spread)), Shield<SEXP>(Rcpp::wrap(gamma)), Shield<SEXP>(Rcpp::wrap(n_epochs)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(seed)), Shield<SEXP>(Rcpp::wrap(learning_rate)), Shield<SEXP>(Rcpp::wrap(sim2dist)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

}

#endif // RCPP_actionet_RCPPEXPORTS_H_GEN_
